#!/usr/bin/python
# Signal using SSH Gateway
# Notification via Signal using SSH Gateway

import re, os, sys

def which(program):
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None

binary = which('ssh')
signal_user = "axolotl"
signal_gateway = "signal-gateway"
signal_wrapper = "/var/www/signal-gateway/bin/signal-wrapper"

if not binary:
    sys.stderr.write('Error: ssh not found\n')
    sys.exit(1)

message = os.environ['NOTIFY_HOSTNAME'] + " "

if os.environ['NOTIFY_WHAT'] == 'SERVICE':
    message += os.environ['NOTIFY_SERVICESTATE'] + " "
    message += os.environ['NOTIFY_SERVICEDESC'] + " "
    message += re.escape(os.environ['NOTIFY_SERVICEOUTPUT'])

else:
    message += "is " + os.environ['NOTIFY_HOSTSTATE']

recipient = os.environ['NOTIFY_CONTACTPAGER']

if not recipient:
    sys.stderr.write('Error: No contact pager set for %s\n' % os.environ['NOTIFY_CONTACTNAME'])
    sys.exit(1)

try: os.environ['NOTIFY_PARAMETERS']
except NameError: os.environ['NOTIFY_PARAMETERS'] = None

if os.environ['NOTIFY_PARAMETERS'] is None:
  os.system('%s %s@%s %s --to %s --message \\"%s\\"' % (binary, signal_user, signal_gateway, signal_wrapper, recipient, message))
else:
  os.system('%s %s@%s %s --to %s --message \\"%s\\" %s' % (binary, signal_user, signal_gateway, signal_wrapper, recipient, message, os.environ['NOTIFY_PARAMETERS']))
